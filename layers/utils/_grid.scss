@use 'sass:list';
@use "sass:selector";

@use "mixin" as mixin;
@use "const" as const;

/* ------------------------------------------------------------- DISPLAY:GRID */
$selectors: (
);

@for $i from 1 through list.length(const.$breakpoints) {
  $selectors: list.append($selectors, '[s#{$i}~="display:grid"],[s#{$i}~="display:inline-grid"]', $separator: comma)
}

#{$selectors} {
  --colcount: 1;
  max-width: 420mm;
  grid-template-columns: repeat(var(--colcount), minmax(0, 1fr));
  margin-inline: auto;
}

@include mixin.media(const.$breakpoints) using ($breakpointIndex, $breakpoint) {

  /* COLCOUNT */
  @for $i from 1 through const.$columns {
    [s#{$breakpointIndex}~="colcount:#{$i}"] {
      --colcount: #{$i};
    }
  }

  /* SPANS */
  @for $i from 1 through const.$columns {

    [s#{$breakpointIndex}~="span:#{$i}"] {
      grid-column: span #{$i};
    }

    @for $j from 1 through const.$columns {

      @if $j >$i {
        [s#{$breakpointIndex}~="span:#{$i}-#{$j}"] {
          grid-column:#{$i} / #{$j};
        }
      }

      @if ($i + $j) <=8 {
        [s#{$breakpointIndex}~="span:#{$i}+#{$j}"] {
          grid-column: #{$i} / span #{$j};
        }
      }
    }

    @if $i < const.$columns {
      [s#{$breakpointIndex}~="span:#{$i}.."] {
        grid-column: #{$i} / -1;
      }
    }

  }

}